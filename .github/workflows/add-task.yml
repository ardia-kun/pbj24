name: Add task via Actions

on:
  workflow_dispatch:
    inputs:
      judul:
        description: 'Judul tugas'
        required: true
      deskripsi:
        description: 'Deskripsi tugas'
        required: false
        default: ''
      tanggal:
        description: 'Tanggal (YYYY-MM-DD atau kata seperti besok, Senin, dll)'
        required: false
        default: ''
      link:
        description: 'Link (opsional)'
        required: false
        default: ''

jobs:
  add-task:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create branch for task
        run: |
          BRANCH=automated/add-task-${{ github.run_number }}
          git checkout -b "$BRANCH"

      - name: Validate tanggal input
        run: |
          set -euo pipefail
          T="${{ github.event.inputs.tanggal }}"
          if [ -z "$T" ]; then
            echo "tanggal kosong â€” diterima";
            exit 0
          fi
          T_LOWER=$(echo "$T" | tr 'A-Z' 'a-z')
          if echo "$T_LOWER" | grep -Eq '^\d{4}-\d{2}-\d{2}$|^\d{1,2}[\/\-]\d{1,2}([\/\-]\d{2,4})?$|^(hari ini|besok|lusa|senin|selasa|rabu|kamis|jumat|jum\'at|sabtu|minggu)$'; then
            echo "tanggal valid: $T";
          else
            echo "ERROR: format 'tanggal' tidak dikenali: '$T'";
            echo "Diterima: kosong, YYYY-MM-DD, dd/mm, dd-mm, atau kata: hari ini, besok, lusa, senin..minggu";
            exit 1;
          fi

      - name: Parse tanggal to ISO and ensure not in past
        id: parse_date
        run: |
          node -e "
          const s = process.argv[1] || ''; 
          function startOfDay(d){const x=new Date(d);x.setHours(0,0,0,0);return x}
          function addDays(d,n){const x=new Date(d);x.setDate(x.getDate()+n);return x}
          const input = s.toString().trim();
          if (!input){ console.log(''); process.exit(0); }
          let t = input.toLowerCase();
          t = t.replace(/sebelum\s+jam\s+[^,;]*/g,'');
          t = t.replace(/pukul\s+[^,;]*/g,'');
          t = t.replace(/\bjam\s+\d{1,2}(:\d{2})?\b/g,'');
          t = t.replace(/,|\(|\)/g,'').trim();
          const iso = t.match(/(\d{4}-\d{2}-\d{2})/);
          let parsed=null;
          if(iso) parsed=new Date(iso[1]);
          else{
            const dmy = t.match(/(\b\d{1,2}[\\/\\-]\d{1,2}[\\/\\-]\d{2,4}\b)/);
            if(dmy){ const norm=dmy[1].replace(/-/g,'/'); const dt=new Date(norm); if(!isNaN(dt)) parsed=dt; }
          }
          if(!parsed){
            const dm = t.match(/(\b\d{1,2}[\\/\\-]\d{1,2}\b)/);
            if(dm){ const parts=dm[1].split(/[-\/]/).map(x=>parseInt(x,10)); const day=parts[0],month=parts[1]; const year=(new Date()).getFullYear(); const dt=new Date(year,month-1,day); if(!isNaN(dt)) parsed=dt; }
          }
          if(!parsed){ if(t==='hari ini') parsed=startOfDay(new Date());
            else if(t==='besok' || /\\bbesok\\b/.test(t)) parsed=addDays(startOfDay(new Date()),1);
            else if(t==='lusa' || t.includes('lusa')) parsed=addDays(startOfDay(new Date()),2);
            else { const weekdays = [['minggu',0],['senin',1],['selasa',2],['rabu',3],['kamis',4],['jumat',5],['jum\'at',5],['sabtu',6]]; for(const [name,idx] of weekdays){ if(t.includes(name)){ const b=startOfDay(new Date()); const diff=(idx-b.getDay()+7)%7; parsed=addDays(b,diff); break;} } }
          }
          if(!parsed){ // fallback
            const fb=new Date(input); if(!isNaN(fb)) parsed=fb;
          }
          if(!parsed){ console.error('UNPARSEABLE'); process.exit(2); }
          const isoOut = parsed.toISOString().slice(0,10);
          // check past
          const today = startOfDay(new Date());
          if(startOfDay(parsed) < today){ console.error('PAST:'+isoOut); process.exit(3); }
          console.log(isoOut);
          " "" "${{ github.event.inputs.tanggal }}"
          
      - name: Set parsed date env
        if: steps.parse_date.outcome == 'success'
        run: |
          PARSED=$(echo "${{ steps.parse_date.outputs.stdout }}" )
          echo "PARSED_DATE=$PARSED" >> $GITHUB_ENV

      - name: Build PR body file
        run: |
          BODYFILE=pr_body.md
          echo "This PR adds a new task via the Actions \"Add task\" form." > $BODYFILE
          echo "" >> $BODYFILE
          echo "- Judul: ${{ github.event.inputs.judul }}" >> $BODYFILE
          echo "- Deskripsi: ${{ github.event.inputs.deskripsi }}" >> $BODYFILE
          echo "- Tanggal (as entered): ${{ github.event.inputs.tanggal }}" >> $BODYFILE
          echo "- Tanggal (parsed ISO): ${PARSED_DATE:-}" >> $BODYFILE
          echo "- Link: ${{ github.event.inputs.link }}" >> $BODYFILE
          echo "" >> $BODYFILE
          echo "Added by Actions run ${{ github.run_number }}" >> $BODYFILE
          echo "PR_BODY_FILE=$BODYFILE" >> $GITHUB_ENV

      - name: Append task to daftar-tugas.csv
        run: |
          set -euo pipefail
          FILE=data/daftar-tugas.csv
          mkdir -p "$(dirname "$FILE")"
          if [ ! -f "$FILE" ]; then
            echo 'judul,deskripsi,tanggal,link' > "$FILE"
          fi
          escape() {
            v="$1"
            v="${v//\"/\"\"}"
            if printf '%s' "$v" | grep -qE '[,"\n]'; then
              printf '"%s"' "$v"
            else
              printf '%s' "$v"
            fi
          }
          JUDUL=$(escape "${{ github.event.inputs.judul }}")
          DESKRIPSI=$(escape "${{ github.event.inputs.deskripsi }}")
          TANGGAL=$(escape "${{ github.event.inputs.tanggal }}")
          LINK=$(escape "${{ github.event.inputs.link }}")
          echo "$JUDUL,$DESKRIPSI,$TANGGAL,$LINK" >> "$FILE"
          git add "$FILE"

      - name: Create pull request with new task
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: automated/add-task-${{ github.run_number }}
          commit-message: "chore: add task from Actions: ${{ github.event.inputs.judul }}"
          title: "chore: add task - ${{ github.event.inputs.judul }}"
          body-file: pr_body.md
          labels: automated,task

      - name: Attempt to merge the created pull request via API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          OWNER: ${{ github.repository_owner }}
          BRANCH: automated/add-task-${{ github.run_number }}
        run: |
          set -euo pipefail
          pr=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/pulls?head=${OWNER}:$BRANCH" | jq -r '.[0].number')
          if [ "$pr" = "null" ] || [ -z "$pr" ]; then
            echo "No PR found for $BRANCH"
            exit 0
          fi
          echo "Found PR #$pr - attempting merge"
          curl -s -X PUT -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/pulls/$pr/merge" \
            -d '{"merge_method":"squash"}' | jq
